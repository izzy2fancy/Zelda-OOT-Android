// Define buildAsLibrary and buildAsApplication variables
def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary

// Apply Android plugin based on build type
if (buildAsApplication) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

// Define Android block
android {
    compileSdkVersion 31
    defaultConfig {
        if (buildAsApplication) {
            applicationId "com.dishii.soh"
        }
        minSdkVersion 18
        targetSdkVersion 31
        versionCode 5
        versionName "1.2.1"
    }
    
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    
    // Ensure applicationVariants block is defined inside the android block
    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
            .dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }
    
    // Ensure externalNativeBuild block is defined inside the android block
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        
        externalNativeBuild {
            cmake {
                // Specify the path to the downloaded CMake executable using the environment variable
                path "$System.env.RUNNER_TOOL_CACHE/cmake/bin/cmake"
                
                // Additional arguments if needed
                arguments "-DANDROID_APP_PLATFORM=android-23", "-DANDROID_STL=c++_static", "-DHAVE_LD_VERSION_SCRIPT=OFF",'-DUSE_OPENGLES=ON'
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }
    
    lintOptions {
        abortOnError false
    }
    
    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

// Define dependencies block outside the android block
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.core:core:1.7.0' // Use the latest version
}

// Define wrapper task outside the android block
task wrapper(type: Wrapper) {
    gradleVersion = '7.3'
}

// Define prepareKotlinBuildScriptModel task outside the android block
task prepareKotlinBuildScriptModel {
}
